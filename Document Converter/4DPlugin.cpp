/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.c
 #	source generated by 4D Plugin Wizard
 #	Project : Document Converter
 #	author : miyako
 #	2014/08/09
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#import <AppKit/AppKit.h>

typedef struct ConverterContext
{
	NSData *data;
	NSDictionary *options;
	NSDictionary *attributes;
	NSAttributedString *attributedString;
	NSString *srcDocumentType;
	NSString *dstDocumentType;
};

void parseDataInMainProcess(ConverterContext *context){

	NSError *error;
	
	context->attributedString = [[NSAttributedString alloc]initWithData:context->data
																options:context->options
													 documentAttributes:NULL
																  error:&error];
}

void parseData(ConverterContext *context, C_BLOB &result){
			
	PA_RunInMainProcess((PA_RunInMainProcessProcPtr)parseDataInMainProcess, (void *)context);

	if(context->attributedString){
		
		NSError *error;
		NSData *data;
		
		if([context->dstDocumentType isEqualToString:NSPlainTextDocumentType]){
		
			data = [[context->attributedString string]dataUsingEncoding:NSUTF8StringEncoding];
			
		}else{
			
			data = [context->attributedString dataFromRange:NSMakeRange(0, [context->attributedString length]) 
										 documentAttributes:context->attributes 
													  error:&error];
		}

		if(data){
			result.setBytes((const uint8_t *)[data bytes], [data length]);
		}	
		
		[context->attributedString release];
	}		
}			

void PluginMain(int32_t selector, PA_PluginParameters params)
{
	try
	{
		int32_t pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (int32_t pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Document Converter

		case 1 :
			Convert_document(pResult, pParams);
			break;

	}
}

// ------------------------------ Document Converter ------------------------------


void Convert_document(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_BLOB Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_TEXT Param4;
	C_BLOB returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);

	ConverterContext context;

	context.data = [[NSData alloc]initWithBytes:Param1.getBytesPtr() length:Param1.getBytesLength()];	

	switch (Param2.getIntValue()) {
		case Document_format_HTML:
			context.srcDocumentType = NSHTMLTextDocumentType;
			break;
		case Document_format_RTF:
			context.srcDocumentType = NSRTFTextDocumentType;
			break;					
		case Document_format_DOC:
			context.srcDocumentType = NSDocFormatTextDocumentType;
			break;	
		case Document_format_DOCX:
			context.srcDocumentType = NSOfficeOpenXMLTextDocumentType;
			break;	
		case Document_format_ODT:
			context.srcDocumentType = NSOpenDocumentTextDocumentType;
			break;				
		case Document_format_WORDML:
			context.srcDocumentType = NSWordMLTextDocumentType;
			break;		
		default:// Document_format_TXT:
			context.srcDocumentType = NSPlainTextDocumentType;
			break;					
	}	
	
	context.options = [[NSMutableDictionary alloc]initWithObjects:[NSArray arrayWithObject:context.srcDocumentType] 
														  forKeys:[NSArray arrayWithObject:NSDocumentTypeDocumentOption]]; 
	
	[context.options setValue:[NSNumber numberWithFloat:60.0f] 
						forKey:NSTimeoutDocumentOption];
	
	NSString *baseUrlString = Param4.copyUTF16String();
	NSURL *baseUrl = [[NSURL alloc]initWithString:baseUrlString];
	[baseUrlString release];
	
	if(baseUrl){
		[context.options setValue:baseUrl forKey:NSBaseURLDocumentOption];	
		[baseUrl release];
	}

	switch (Param3.getIntValue()) {
		case Document_format_HTML:
			context.dstDocumentType = NSHTMLTextDocumentType;
			break;
		case Document_format_RTF:
			context.dstDocumentType = NSRTFTextDocumentType;
			break;					
		case Document_format_DOC:
			context.dstDocumentType = NSDocFormatTextDocumentType;
			break;	
		case Document_format_DOCX:
			context.dstDocumentType = NSOfficeOpenXMLTextDocumentType;
			break;	
		case Document_format_ODT:
			context.dstDocumentType = NSOpenDocumentTextDocumentType;
			break;				
		case Document_format_WORDML:
			context.dstDocumentType = NSWordMLTextDocumentType;
			break;		
		default:// Document_format_TXT:
			context.dstDocumentType = NSPlainTextDocumentType;
			break;					
	}		
	
	context.attributes = [[NSMutableDictionary alloc]initWithObjects:[NSArray arrayWithObject:context.dstDocumentType] 
															 forKeys:[NSArray arrayWithObject:NSDocumentTypeDocumentAttribute]]; 	
	
	parseData(&context, returnValue);

	[context.attributes release];
	[context.options release];
	[context.data release];
	
	returnValue.setReturn(pResult);
}

